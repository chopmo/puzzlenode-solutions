#!/usr/bin/env ruby -W
def convert_little_endian(bytes)
  result = 0
  shift = 0
  bytes.each do |b|
    result += (b << shift)
    shift += 8
  end
  result
end


def encode_to_bool_array(s)
  result = []
  s.chars.each do |c|
    i = c.ord
    (7.downto(0)).map { |p| 2 ** p }.each do |mask|
      result << (i & mask > 0)
    end
  end
  result
end


input_filename = ARGV[0]
message_filename = ARGV[1]

bmp_bytes = open(input_filename, "rb").bytes.to_a
offset = convert_little_endian(bmp_bytes.slice(0x0a, 4))
pixel_array_size = convert_little_endian(bmp_bytes.slice(0x22, 4))

message = open(message_filename).read
encoded_message = encode_to_bool_array(message) # .map { |b| b ? "1" : "0" }.join

pixel_array_size.times do |i|
  val = (i >= encoded_message.size ? false : encoded_message[i])
  pixel_idx = offset + i
  if val
    bmp_bytes[pixel_idx] = bmp_bytes[pixel_idx] | 1
  else
    bmp_bytes[pixel_idx] = bmp_bytes[pixel_idx] & 0xFE
  end
end

open("./solution.bmp", "wb") do |f|
  f.write bmp_bytes.map { |b| b.chr }.join
end
